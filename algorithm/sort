#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
int main(){
  float h[1000001];
  float temp[1000001];
  int ans = 0;
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++){
    scanf("%f", &h[i]);
    temp[i] = h[i];
  }
  sort(h, h+n);
  for (int i = 0; i < n; i++){
    if (h[i] != temp[i]){
      ans++;
    }
  }
  printf("%d", ans);
  return 0;
}

#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
int main(){
  int n;
  pair <int, int> p[1000001] = {};
  scanf("%d", &n);
  for (int i = 0; i < n; i++){
    scanf("%d %d", &p[i].first, &p[i].second);
  }
  sort(p, p+n);
  for (int i = 0; i < n; i++){
    printf("%d ", p[i].second);
    if (p[i].first != p[i+1].first){
      printf("\n");
    }
  }
  return 0;
}





#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
struct character
{
  int level;
  int exp;
  int power;

};

bool cmp(character left, character right){
  if (left.level > right.level){
    return true;
  }
  else if (left.level > right.level){
    if (left.exp > right.exp){
      return true;
    }
    else if (left.exp == right.exp){
      return left.power > right.power;
    }
    else{
      return false;
    }
    }
  else{
    return false;
    }
}

int main(){
  character c[100001];
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++){
    scanf("%d %d %d", &c[i].level, &c[i].exp, &c[i].power);
  }
  sort(c, c+n, cmp);
  for (int i = 0; i < n; i++){
    printf("%d %d %d\n", c[i].level, c[i].exp, c[i].power);
  }
  return 0;
}





#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
int main(){
  int n;
  scanf("%d", &n);
  int m[1000000];
  for (int i = 0; i < n; i++){
  scanf("%d", &m[i]);
  }
  sort(m, m + n);
  int ans;
  ans = m[0];
  int count = 1;
  int max = 0;
  for (int i = 0; i < n-1; i++){
    if (m[i] == m[i + 1]){
      count++;
    }
    else{
      count = 1;
    }
    if (count > max){
      max = count;
      ans = m[i];
    }
  }
  printf("%d", ans);
  
  return 0;
}



